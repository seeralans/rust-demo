#+title: Rust + Python Demo

* Coverage Problem In 1D

- Random walker on a finite 1D lattice
- Position $n = 1, 2, \cdots N$
- Initial Position $n_0$
- Probability of jumping left $p/2$
- Probability of jumping right $p/2$
- Probability of staying at the same site $1 - p$



* Python Version
  [[./rust_demo/pyfuncs.py][Python Version]]



#+begin_src jupyter-python :session rust-demo :results drawer :exports none
import numpy as np
import matplotlib.pyplot as pp
pp.style.use(["default", "paper"])


def coverage_sim(n0, p, N, num_trials):

  trial_times = np.zeros(num_trials)
  for trial in range(num_trials):
    visits = np.zeros(N, dtype=int)
    current_pos = n0
    visits[current_pos-1] += 1
    time = 0
    while not visits.all() > 0:
      # draw a random number
      val = np.random.rand()
      # stay put
      if val < 1 - p:
        continue
      # move to the left
      elif val < 1 - p/2:
        current_pos -= 1
      # move to the right
      else:
        current_pos += 1

      # boundary checks
      if current_pos < 1:
        current_pos += 1
      elif current_pos > N:
        current_pos -= 1
      # increment visit
      visits[current_pos-1] += 1
      # increment time
      time += 1
    trial_times[trial] = time
  return trial_times
#+end_src

#+RESULTS:
